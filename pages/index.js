import {useState} from 'react'
import Head from 'next/head'
import Image from 'next/image'

const GameColumn = ({col, idx, onClick, gameOver}) => {
  return (
    <div className="column" key={`col-${idx}`} onClick={onClick}>
      {col.map((cell, x) => {
        return (
        <>
          <span 
            className={`cell`} 
            key={`cell-${idx}-${x}`}
          >
            {cell}
          </span>
          <style jsx>{`
            transform: 
              translateY(-${gameOver ? 0 : (x * 30) + 30}px)
          `}</style>
        </>
        )
      })}
    </div>
  )
}

const X_PIECE = "ðŸŸ¡"
const O_PIECE = "ðŸ”´"

const ConnectFourGame = () => {
  let initial = {};
  for (var c = 0; c < 7; c++) {
    initial[c] = [null, null, null, null, null, null];
  }
  const [gameState, setGameState] = useState(initial);
  const [winner, setWinner] = useState(null);
  const [currentPlayer, setCurrentPlayer] = useState(X_PIECE);

  const gameOver = (currentPlayer) => {
    let column;

    // Check if there are any four in a row in a column
    for(var c = 0; c < 7; c++) {
      for(var r = 0; r < 6 - 3; r++) {
        if(gameState[c][r] != null &&
          gameState[c][r] == gameState[c][r+1] &&
          gameState[c][r+1] == gameState[c][r+2] &&
          gameState[c][r+2] == gameState[c][r+3]) {
          return true;
        }
      }
    }

    // Check if there are any four in a row in a row
    for(var c = 0; c < 7 - 3; c++) {
      for(var r = 0; r < 6; r++) {
        if(gameState[c][r] != null &&
          gameState[c][r] == gameState[c+1][r] &&
          gameState[c+1][r] == gameState[c+2][r] &&
          gameState[c+2][r] == gameState[c+3][r]) {
          return true;
        }
      }
    }

    // Check if there are any four diagonal up to the right
    for(var c = 0; c < 7; c++) {
      for(var r = 0; r < 6; r++) {
        if(gameState[c][r] != null &&
          gameState[c][r] == gameState[c+1][r+1] &&
          gameState[c+1][r+1] == gameState[c+2][r+2] &&
          gameState[c+2][r+2] == gameState[c+3][r+3]) {
          return true;
        }
      }
    }

    // Check if there are any four diagonal down to the right
    for(var c = 0; c < 7; c++) {
      for(var r = 5; r >= 3; r--) {
        if(gameState[c][r] != null &&
          gameState[c][r] == gameState[c+1][r-1] &&
          gameState[c+1][r-1] == gameState[c+2][r-2] &&
          gameState[c+2][r-2] == gameState[c+3][r-3]) {
          return true;
        }
      }
    }

    return false;
  };

  const addPiece = (columnIdx) => {
    const column = gameState[columnIdx];
    const piecePos = column.indexOf(null);
    column[piecePos] = currentPlayer;
    setGameState({
      ...gameState,
      [columnIdx]: column
    })

    // game over?
    if(gameOver(currentPlayer)) {
      setWinner(currentPlayer)
    }

    setCurrentPlayer(currentPlayer == X_PIECE ? O_PIECE : X_PIECE)
  }

  return (
    <div className="layout">
      <div className="update">{winner && <h1>{winner} is the winner</h1>}</div>
      Current player is {currentPlayer}.
        <div className="board">
          {Object.entries(gameState).map(([k, col], x) => {
            return <GameColumn 
              col={col} 
              idx={x} 
              onClick={() => addPiece(x)} 
              gameOver={gameOver()} 
            />
          })}
        </div>
    </div>
  );
}

export default function Home() {
  return (
    <div>
      <Head>
        <title>Connect 4</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>
          Connect 4
        </h1>
        <ConnectFourGame />
      </main>
    </div>
  )
}
